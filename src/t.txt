FragmentManager.hpp ==>>

#ifndef FRAGMENT_MANAGER_HPP
#define FRAGMENT_MANAGER_HPP

#include <vector>

#include "Api.h"
#include "Bot.h"
#include "Fragment.hpp"

using namespace TgBot;

class Fragment;

class FragmentManager {
private:
    Bot* bot = nullptr;

public:
    FragmentManager(Bot* bot);

    inline Bot& getBot();

    inline const Api& getApi();

    ~FragmentManager();
};

#endif



FragmentManager.cpp ==>>

#include "FragmentManager.hpp"

#include "Fragment.hpp"

FragmentManager::FragmentManager(Bot* bot) {
    this->bot = bot;
}


inline Bot& FragmentManager::getBot() {
    return *bot;
}

inline const Api& FragmentManager::getApi() {
    return bot->getApi();
}


FragmentManager::~FragmentManager() {
    // int count = fragments.size();
    // for (size_t i = 0; i < count; i++){
    //     delete fragments.at(i);
    // }

    // fragments.clear();
}


Fragment.hpp ==>>

#ifndef FRAGMENT
#define FRAGMENT

#include "Api.h"
#include "types/Message.h"
#include "vector"

using namespace TgBot;

class FragmentManager;

class Fragment {
    FragmentManager* fragmentManager = nullptr;

protected:
    inline Bot& getBot();
    inline const Api& getApi();

public:
    int fragmentId;

    Fragment(int id);

    ~Fragment();
};

#endif


Fragment.cpp ==>>

#include "Fragment.hpp"

#include "FragmentManager.hpp"

Fragment::Fragment(int id) {
}

inline Bot& Fragment::getBot() {
    return fragmentManager->getBot();
}

inline const Api& Fragment::getApi() {
    return fragmentManager->getApi();
}

void Fragment::setFragmentManager(FragmentManager* fm) {
    fragmentManager = fm;
}

Fragment::~Fragment() {
}



Error ==>>

/usr/bin/ld: CMakeFiles/Buildroid.dir/src/fragments/LoginFragment.cpp.o: in function `LoginFragment::onCommand(std::shared_ptr<TgBot::Message> const&)':
LoginFragment.cpp:(.text+0x152): undefined reference to `Fragment::getApi()'
collect2: error: ld returned 1 exit status
make[2]: *** [CMakeFiles/Buildroid.dir/build.make:201: Buildroid] Error 1
make[1]: *** [CMakeFiles/Makefile2:155: CMakeFiles/Buildroid.dir/all] Error 2
make: *** [Makefile:136: all] Error 2


Look I am gonna send you text in this patter :

*Filename* ==>>

****


*Filename* ==>>

****

and so on,  **** means source code, *Filename* is either cpp or hpp file.

And at the end of text, you will get error message after "Error ==>>", you must find cause of it. Ok ?